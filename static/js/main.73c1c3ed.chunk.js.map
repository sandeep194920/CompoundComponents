{"version":3,"sources":["components/styles/Card.js","components/Card.js","App.js","serviceWorker.js","index.js"],"names":["Container","styled","div","Body","Title","h1","Text","p","Image","img","Button","button","Card","classes","children","restProps","className","classNames","type","src","alt","App","movies","map","movie","key","id","image","title","desc","ctaText","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"ouFAEO,IAAMA,EAAYC,IAAOC,IAAV,KAYTC,EAAOF,IAAOC,IAAV,KAOJE,EAAQH,IAAOI,GAAV,KAKLC,EAAOL,IAAOM,EAAV,KAIJC,EAAQP,IAAOQ,IAAV,KAGLC,EAAST,IAAOU,OAAV,KC7BZ,SAASC,EAAT,GAAoD,IAApCC,EAAmC,EAAnCA,QAASC,EAA0B,EAA1BA,SAAaC,EAAa,sCACxD,OACE,kBAACf,EAAD,eAAWgB,UAAWC,IAAW,OAAQJ,IAAcE,GACpDD,GAMPF,EAAKT,KAAO,YAAwD,IAApCU,EAAmC,EAAnCA,QAASC,EAA0B,EAA1BA,SAAaC,EAAa,sCACjE,OACE,kBAACZ,EAAD,eAAMa,UAAWC,IAAW,aAAcJ,IAAcE,GACrDD,IAKPF,EAAKR,MAAQ,YAAyD,IAApCS,EAAmC,EAAnCA,QAASC,EAA0B,EAA1BA,SAAaC,EAAa,sCACnE,OACE,kBAACX,EAAD,eAAOY,UAAWC,IAAW,cAAeJ,IAAcE,GACvDD,IAKPF,EAAKN,KAAO,YAAwD,IAApCO,EAAmC,EAAnCA,QAASC,EAA0B,EAA1BA,SAAaC,EAAa,sCACjE,OACE,kBAACT,EAAD,eAAMU,UAAWC,IAAW,aAAcJ,IAAcE,GACrDD,IAKPF,EAAKF,OAAS,YAA0D,IAApCG,EAAmC,EAAnCA,QAASC,EAA0B,EAA1BA,SAAaC,EAAa,sCACrE,OACE,kBAACL,EAAD,eACEQ,KAAK,SACLF,UAAWC,IAAW,eAAgBJ,IAClCE,GAEHD,IAKPF,EAAKJ,MAAQ,YAAyD,IAApCK,EAAmC,EAAnCA,QAASM,EAA0B,EAA1BA,IAAKC,EAAqB,EAArBA,IAAQL,EAAa,uCACnE,OACE,kBAACP,EAAD,eACEW,IAAKA,EACLC,IAAKA,EACLJ,UAAWC,IAAW,cAAeJ,IACjCE,K,YClCKM,MAjBf,WACE,OACE,8BACGC,EAAOC,KAAI,SAACC,GAAD,OACV,kBAACZ,EAAD,CAAMC,QAAQ,KAAKY,IAAKD,EAAME,IAC5B,kBAACd,EAAKJ,MAAN,CAAYW,IAAKK,EAAMG,MAAOP,IAAKI,EAAMI,QACzC,kBAAChB,EAAKT,KAAN,KACE,kBAACS,EAAKR,MAAN,KAAaoB,EAAMI,OACnB,kBAAChB,EAAKN,KAAN,KAAYkB,EAAMK,KAAlB,KACA,kBAACjB,EAAKF,OAAN,KAAcc,EAAMM,QAApB,YCDQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.73c1c3ed.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  min-width: 0;\n  max-width: 250px;\n  background-color: #fff;\n  word-wrap: break-word;\n  background-clip: border-box;\n  border-radius: 0.25rem;\n  overflow: hidden;\n  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.75);\n`;\nexport const Body = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex: 1 1 auto;\n  min-height: 1px;\n  padding: 1.25rem;\n`;\nexport const Title = styled.h1`\n  font-size: 1.25rem;\n  font-weight: bold;\n  margin: 0;\n`;\nexport const Text = styled.p`\n  line-height: 25px;\n  color: #6c757d;\n`;\nexport const Image = styled.img`\n  width: 100%;\n`;\nexport const Button = styled.button`\n  cursor: pointer;\n  margin-top: auto;\n  width: 100%;\n  color: #fff;\n  background-color: #28a745;\n  border-color: #28a745;\n  display: block;\n  font-weight: bold;\n  text-align: center;\n  vertical-align: middle;\n  user-select: none;\n  border: 1px solid transparent;\n  padding: 0.375rem 0.75rem;\n  font-size: 1rem;\n  line-height: 1.5;\n  border-radius: 0.25rem;\n  transition: color 0.15s ease-in-out, background-color 0.15s ease-in-out,\n    border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;\n  &:hover {\n    color: #fff;\n    background-color: #218838;\n    border-color: #1e7e34;\n  }\n`;\n","import React from \"react\";\nimport classNames from \"classnames\"; // library used for joining the array in className. Eample-> className = {['cssA,cssB'].join('')} and this leads className = 'cssA cssB'. This can be simplified with 'classnames' module\nimport { Container, Title, Text, Image, Body, Button } from \"./styles/Card\";\n\nexport function Card({ classes, children, ...restProps }) {\n  return (\n    <Container className={classNames(\"card\", classes)} {...restProps}>\n      {children}\n    </Container>\n  );\n}\n// Note: We aren't using className \"card\" / \"card__body\"/ \"card__title\" and so on. We might define it later if needed\n\nCard.Body = function CardBody({ classes, children, ...restProps }) {\n  return (\n    <Body className={classNames(\"card__body\", classes)} {...restProps}>\n      {children}\n    </Body>\n  );\n};\n\nCard.Title = function CardTitle({ classes, children, ...restProps }) {\n  return (\n    <Title className={classNames(\"card__title\", classes)} {...restProps}>\n      {children}\n    </Title>\n  );\n};\n\nCard.Text = function CardText({ classes, children, ...restProps }) {\n  return (\n    <Text className={classNames(\"card__text\", classes)} {...restProps}>\n      {children}\n    </Text>\n  );\n};\n\nCard.Button = function CardButton({ classes, children, ...restProps }) {\n  return (\n    <Button\n      type=\"button\"\n      className={classNames(\"card__button\", classes)}\n      {...restProps}\n    >\n      {children}\n    </Button>\n  );\n};\n\nCard.Image = function CardImage({ classes, src, alt, ...restProps }) {\n  return (\n    <Image\n      src={src}\n      alt={alt}\n      className={classNames(\"card__image\", classes)}\n      {...restProps}\n    />\n  );\n};\n","import React from \"react\";\nimport \"./App.scss\";\nimport { Card } from \"./components/Card\";\nimport movies from \"./data\";\nfunction App() {\n  return (\n    <main>\n      {movies.map((movie) => (\n        <Card classes=\"mr\" key={movie.id}>\n          <Card.Image src={movie.image} alt={movie.title} />\n          <Card.Body>\n            <Card.Title>{movie.title}</Card.Title>\n            <Card.Text>{movie.desc} </Card.Text>\n            <Card.Button>{movie.ctaText} </Card.Button>\n          </Card.Body>\n        </Card>\n      ))}\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}